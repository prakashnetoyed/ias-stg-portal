{
  "version": 3,
  "sources": ["src/app/services/user.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable, map, of } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface StatusCount {\n  status: string;   // e.g., \"active\", \"inactive\", \"pending\"\n  count: number;    // number of records for that status\n}\nexport interface User {\n  id: number;\n  createdAt: string;\n  updatedAt: string;\n  name?: string | null;\n  mobileNumber: string | null;\n  email: string;\n  alternateEmail: string | null;\n  dateOfBirth?: string | null;\n  profilePic?: string | null;\n  motherTongue?: string | null;\n  dob?: string | null;\n  isEmailVerified: boolean;\n  isDetailSubmitted: boolean;\n  hasSubscription: boolean;\n  isSubmittedByDopt: boolean;\n  isActive: boolean;\n  retirementReason?: string | null;\n  gender?: string | null;\n  lastLoggedInAt: string;\n  profilePicture?: string | null;\n  batchYear?: number | null;\n  role: string;\n  status: string;\n  doptOfficer: {\n    id: number;\n    createdAt: string;\n    updatedAt: string;\n    identityNo: string;\n    englishName: string | null;\n    hindiName: string;\n    dob: string;\n    detailPageUrl: string;\n    allotmentYear: string;\n    recruitmentSource: string;\n    qualifications: string[];\n    cadreDomicile: string;\n    posting: string;\n    profilePic: string | null;\n    serviceCadreAllotmentYear: string;\n    sourceOfRecruitment: string;\n    gender: string;\n    placeOfDomicile: string;\n    motherTongue: string;\n    languagesKnown: string;\n    retirementReason: string;\n  } | null;\n  cadre?: {\n    id: number;\n    createdAt: string;\n    updatedAt: string;\n    name: string;\n  } | null;\n    statusCount?: StatusCount[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = `${environment.apiUrl}/accounts/whoami`;\n  private userSubject = new BehaviorSubject<User | null>(null);\n  user$ = this.userSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  getUser(): Observable<User | null> {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      return of(null);\n    }\n\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n\n    return this.http.get<{ data: any }>(this.apiUrl, { headers }).pipe(\n      map(response => {\n        let parsed: User;\n\n        // Handle both stringified and object cases\n        if (typeof response.data === 'string') {\n          parsed = JSON.parse(response.data);\n        } else {\n          parsed = response.data;\n        }\n\n        this.userSubject.next(parsed);\n        return parsed;\n      })\n    );\n  }\n\n   refreshUser(): Observable<User | null> {\n    return this.getUser();\n  }\n\n    getCurrentUser(): User | null {\n    return this.userSubject.value;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAoEM,IAAO,cAAP,MAAO,aAAW;EAKtB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;AAJZ,SAAA,SAAS,GAAG,YAAY,MAAM;AAC9B,SAAA,cAAc,IAAI,gBAA6B,IAAI;AAC3D,SAAA,QAAQ,KAAK,YAAY,aAAY;EAEE;EAEvC,UAAO;AACL,UAAM,QAAQ,aAAa,QAAQ,WAAW;AAC9C,QAAI,CAAC,OAAO;AACV,aAAO,GAAG,IAAI;IAChB;AAEA,UAAM,UAAU,IAAI,YAAY;MAC9B,eAAe,UAAU,KAAK;KAC/B;AAED,WAAO,KAAK,KAAK,IAAmB,KAAK,QAAQ,EAAE,QAAO,CAAE,EAAE,KAC5D,IAAI,cAAW;AACb,UAAI;AAGJ,UAAI,OAAO,SAAS,SAAS,UAAU;AACrC,iBAAS,KAAK,MAAM,SAAS,IAAI;MACnC,OAAO;AACL,iBAAS,SAAS;MACpB;AAEA,WAAK,YAAY,KAAK,MAAM;AAC5B,aAAO;IACT,CAAC,CAAC;EAEN;EAEC,cAAW;AACV,WAAO,KAAK,QAAO;EACrB;EAEE,iBAAc;AACd,WAAO,KAAK,YAAY;EAC1B;;;uBAxCW,cAAW,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;EAAA;;",
  "names": []
}
