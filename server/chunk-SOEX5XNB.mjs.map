{
  "version": 3,
  "sources": ["src/app/user-portal/pages/user-members/user-members.component.ts", "src/app/user-portal/pages/user-members/user-members.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-user-members',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './user-members.component.html',\n  styleUrl: './user-members.component.scss'\n})\nexport class UserMembersComponent {\n  toastMessage: string = '';\n  users: any[] = [];\n  pageSize: number = 15;\n  currentPage: number = 1;\n  cadres: any[] = [];\n  years: number[] = [];\n  selectedCadreId: number | null = null;\n  selectedYear: number | null = null;\n  searchText: string = '';\n  pagination = {\n    total: 0,\n    page: 1,\n    limit: 15\n  };\n  constructor(private http: HttpClient) { }\n  ngOnInit(): void {\n    this.loadCadres();\n    this.loadUsers();\n    const currentYear = new Date().getFullYear();\n    for (let y = 1990; y <= currentYear; y++) {\n      this.years.push(y);\n    }\n  }\n  onSearchKeyup(): void {\n    this.loadUsers(1); // refresh results from first page\n  }\n  loadUsers(page: number = this.currentPage, limit: number = this.pageSize) {\nlet url = `${environment.apiUrl}/admin/users?page=${page}&limit=${limit}&isActive=true`;\n\n    // Add `name` if input has value\n    if (this.searchText.trim()) {\n      url += `&name=${encodeURIComponent(this.searchText.trim())}`;\n    }\n\n    // Add `cadreId` if a cadre is selected\n    if (this.selectedCadreId) {\n      url += `&cadre=${this.selectedCadreId}`;\n    }\n\n    if (this.selectedYear) {\n      url += `&allotmentYear=${this.selectedYear}`;\n    }\n\n    this.http.get<any>(url)\n\n    // this.http.get<any>(`${environment.apiUrl}/admin/users?isActive=true&page=${page}&limit=${limit}`)\n      .subscribe({\n        next: (res) => {\n          console.log(res);\n          this.users = res.data.data;\n          this.pagination.total = res.data.pagination.total;\n          this.pagination.limit = limit;\n          this.pagination.page = page;\n          console.log(this.users);\n\n        },\n        error: (err) => {\n          console.error('Error fetching Users:', err);\n        }\n      });\n  }\n  get totalPages(): number {\n    return Math.ceil(this.pagination.total / this.pagination.limit);\n  }\n\n  loadCadres(): void {\n    this.http.get<any>(`${environment.apiUrl}/dopt/cadres?limit=0`)\n      .subscribe({\n        next: (res) => {\n          this.cadres = res.data?.data || [];\n        },\n        error: (err) => {\n          console.error('Error fetching cadres:', err);\n        }\n      });\n  }\n  onCadreSelect(event: Event): void {\n    const selectEl = event.target as HTMLSelectElement;\n    this.selectedCadreId = Number(selectEl.value);\n    console.log('Selected Cadre ID:', this.selectedCadreId);\n\n    // ðŸ‘‰ Now you can pass this.selectedCadreId in your next API call\n    // e.g., this.loadUsers(1, this.pageSize, this.selectedCadreId);\n  }\n  onCadreChange(): void {\n    // If user selects \"All Cadres\" (empty value), reset to null\n    if (!this.selectedCadreId) {\n      this.selectedCadreId = null;\n    }\n\n    // Reload users with current search and (optional) cadre filter\n    this.loadUsers(1);\n  }\n  changePage(page: number) {\n    if (page >= 1 && page <= this.totalPages) {\n      this.currentPage = page;\n      this.loadUsers(this.currentPage, this.pageSize);\n    }\n  }\n\n  // ðŸ‘ˆ previous\n  goPrevious() {\n    this.changePage(this.currentPage - 1);\n  }\n\n  // ðŸ‘ˆ next\n  goNext() {\n    this.changePage(this.currentPage + 1);\n  }\n\n\n  onPageSizeChange(event: any) {\n    this.pageSize = +event.target.value;\n    this.currentPage = 1;\n    this.loadUsers(this.currentPage, this.pageSize);\n  }\n}\n", "<div class=\"tableheading\">\n    <div class=\"d-flex justify-content-between align-items-center flex-wrap mb-3\">\n        <h5 class=\"mb-1\">Members' Directory</h5>\n        <div class=\"filter-options d-flex align-items-center gap-2 w-75\">\n            <select class=\"form-select\" [(ngModel)]=\"selectedCadreId\" (change)=\"loadUsers(1)\">\n                <option [ngValue]=\"null\" selected>All Cadres</option> <!-- clears the filter -->\n                <option *ngFor=\"let c of cadres\" [value]=\"c.id\">{{ c.name }}</option>\n            </select>\n\n            <select class=\"form-select\" [(ngModel)]=\"selectedYear\" (change)=\"loadUsers(1)\">\n                <option [ngValue]=\"null\" selected>All Batches</option>\n                <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\n            </select>\n\n            <div class=\"input-group w-100\" >\n                <input type=\"text\" class=\"form-control border-end-0\" placeholder=\"Search by name\"\n                [(ngModel)]=\"searchText\" (keyup)=\"onSearchKeyup()\" />\n                <span class=\"input-group-text bg-transparent border-start-0\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\">\n                        <path\n                            d=\"M10.2708 9.08333H9.64542L9.42375 8.86958C10.1996 7.96708 10.6667 6.79542 10.6667 5.52083C10.6667 2.67875 8.36292 0.375 5.52083 0.375C2.67875 0.375 0.375 2.67875 0.375 5.52083C0.375 8.36292 2.67875 10.6667 5.52083 10.6667C6.79542 10.6667 7.96708 10.1996 8.86958 9.42375L9.08333 9.64542V10.2708L13.0417 14.2213L14.2213 13.0417L10.2708 9.08333ZM5.52083 9.08333C3.54958 9.08333 1.95833 7.49208 1.95833 5.52083C1.95833 3.54958 3.54958 1.95833 5.52083 1.95833C7.49208 1.95833 9.08333 3.54958 9.08333 5.52083C9.08333 7.49208 7.49208 9.08333 5.52083 9.08333Z\"\n                            fill=\"#727272\" />\n                    </svg> </span>\n            </div>\n        </div>\n    </div>\n\n    <!-- Table -->\n    <div class=\"table-responsive custom-table\">\n        <table class=\"table align-middle mb-0\">\n            <thead>\n                <tr>\n                    <th>S.no</th>\n                    <th>Name</th>\n                    <th>Cadre</th>\n                    <th>Batch Year</th>\n                    <th>Photo</th>\n                    <th>Email</th>\n                    <!-- <th>Mobile</th> -->\n                </tr>\n            </thead>\n            <tbody *ngIf=\"users && users.length > 0; else noData\">\n                <tr *ngFor=\"let user of users; let i = index\">\n                    <td>{{ (currentPage - 1) * pageSize + i + 1 }}</td>\n                    <td>{{user.doptOfficer?.englishName}}</td>\n                    <td>{{user.doptOfficer?.cadre.name}}</td>\n                     <td>{{user.doptOfficer?.allotmentYear}}</td>\n                    <td><img [src]=\"user.doptOfficer?.profilePic\" alt=\"profile pic\" class=\"tableprofile\"></td>\n                    <td>{{user?.email}}</td>\n                    <!-- <td>\n                        {{\n                        user.mobileNumber\n                        ? user.mobileNumber.slice(0,4) + '****' + user.mobileNumber.slice(-2)\n                        : 'N/A'\n                        }}\n                    </td> -->\n                   \n                </tr>\n            </tbody>\n            <ng-template #noData>\n                <tbody>\n                    <tr>\n                        <td colspan=\"7\" class=\"text-center fs-3 py-4\">No members found.</td>\n                    </tr>\n                </tbody>\n            </ng-template>\n        </table>\n    </div>\n\n    <!-- Pagination -->\n    <div class=\"d-flex justify-content-end align-items-center gap-2 mt-3\">\n        <!-- <div>Page {{ currentPage }} of {{ totalPages }}</div> -->\n        <nav>\n            <ul class=\"pagination modern-pagination mb-0\">\n\n                <!-- Previous Button -->\n                <li class=\"page-item\" [class.disabled]=\"currentPage === 1\">\n                    <a class=\"page-link\" (click)=\"goPrevious()\">â€¹</a>\n                </li>\n\n                <!-- Page Numbers -->\n                <li class=\"page-item\" *ngFor=\"let page of [].constructor(totalPages); let i = index\">\n                    <a class=\"page-link\" (click)=\"changePage(i+1)\" [class.active]=\"i + 1 === currentPage\">{{ i+1 }}</a>\n                </li>\n\n                <!-- Next Button -->\n                <li class=\"page-item\" [class.disabled]=\"currentPage === totalPages\">\n                    <a class=\"page-link\" (click)=\"goNext()\">â€º</a>\n                </li>\n            </ul>\n        </nav>\n\n        <div class=\"d-flex align-items-center\">\n            <select class=\"form-select form-select-sm w-auto\" (change)=\"onPageSizeChange($event)\">\n                <option [selected]=\"pageSize===15\" value=\"15\">15 /Page</option>\n                <option [selected]=\"pageSize===30\" value=\"30\">30 /Page</option>\n                <option [selected]=\"pageSize===50\" value=\"50\">50 /Page</option>\n            </select>\n        </div>\n    </div>\n\n</div>"],
  "mappings": "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",
  "names": []
}
